#! /bin/sh

data_dir=$HOME/.data
DATA_DIR=$HOME/.data

install_git_remote() {
    remote=$1
    username=$2
    echo "Please make sure that your SSH keys are up to date with $remote (username: $username)"
    data=$DATA_DIR/$remote
    remotedir=$HOME/$remote

    if ! [ -d "$remotedir" ]; then
        mkdir "$remotedir"
    fi

    if [ -f "$data" ]; then
        curdir=$(pwd)
        cd "$remotedir" || return
        logfile=/tmp/${remote}_clone.log
        while read -r prj; do
            echo "Cloning ${prj}..."
            git clone "$prj" >> "$logfile"
            echo "Finished cloning ${prj}..."
       done < "$data"
       cd "$curdir" || return
    else
       echo "$data does not exist. Cannot install srht projects."
    fi
}

collect_git_repos() {
    repodir=$1
    datafile=$2

    for pkg in "$repodir"/*; do
        if [ -d "$pkg/.git" ]; then
            git --git-dir "$pkg/.git" remote -v | awk -F ' ' '{print $2}' | sed -n '1p' >> "$datafile"
        fi
    done
}

update_git_remote() {
    remote=$1
    echo "Updating $remote data..."
    data=$DATA_DIR/${remote}data

    printf "" > "$data"

    gitdir=$HOME/$remote
    collect_git_repos "$gitdir" "$data"
}

install_srht_data() {
    install_git_remote "srht" "sea_wulf"
}

update_srht_data() {
    update_git_remote "srht"
}

install_gitlab_data() {
    install_git_remote "gitlab" "jandersen7"
}

update_gitlab_data() {
    update_git_remote "gitlab"
}

install_github_data() {
    install_git_remote "github" "havulv"
}

update_github_data() {
    update_git_remote "github"
}

update_vim_data() {
    if hash vim ; then
        echo "Updating vim data..."
        vim_data=$data_dir/vimdata

        printf "" > "$vim_data"

        vim_bundle=$HOME/.vim/bundle

        collect_git_repos "$vim_bundle" "$vim_data"
    else
        echo "Vim not installed."
    fi
}


install_vim_data() {
    if hash vim ; then
       vim_data=$data_dir/vimdata 
       vim_bundle=$HOME/.vim/bundle

       if [ -f "$vim_data" ]; then
           if [ -d "$vim_bundle" ]; then
               echo "Note -- this is a straight clone. If any vim plugins have submodules, YOU are responsible for using \`--recursive\`"
               curdir=$(pwd)
               cd "$vim_bundle" || return
                while read -r bundle; do
                   if ! [ -d "$vim_bundle/$(basename "$bundle")" ] \
                       || [ -d "$vim_bundle/$(basename "$bundle" | cut -d '.' -f1)" ]; then
                       git clone "$bundle"
                   else
                       echo "This vim plugin already exists."
                   fi
               done < "$vim_data"

               cd "$curdir" || return
           else
               echo "It looks like Vim was improperly installed. $vim_bundle does not exist."
           fi
       else
           echo "$vim_data does not exist. Cannot install vim packages."
       fi
    else
        if [ "$(uname -s)" = "Darwin" ]; then
            if ! hash brew ; then
                brew install vim
            else 
                /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
                brew install vim
            fi
        else
            pacman -Syu --noconfirm vim
        fi
        install_vim_data
    fi
}

check_pip3_installation() {
    PIP_VERSION=$(pip --version | cut -d ' ' -f6 | cut -d ')' -f1)
    PIP3=False

    if [ "$(echo "$PIP_VERSION" | cut -d '.' -f1)" = "2" ]; then
        if hash pip3; then
            PIP3=True
        else
            echo "WARN: Python 3.X is not installed. Run \'update pip2\' to record packages."
            return 1
        fi
    elif [ "$(echo "$PIP_VERSION" | cut -d '.' -f1)" = "3" ]; then
        PIP3=False
    fi
}

check_pip2_installation() {
    PIP_VERSION=$(pip --version | cut -d ' ' -f6 | cut -d ')' -f1)
    PIP2=False

    if [ "$(echo "$PIP_VERSION" | cut -d '.' -f1)" = "2" ]; then
        PIP2=False
    elif [ "$(echo "$PIP_VERSION" | cut -d '.' -f1)" = "3" ]; then
        if hash pip2 > /dev/null 2>&1 ; then
            PIP2=True
        else
            echo "Python 2.X is not installed. Run \`update pip\` to record packages."
            return 1
        fi
    fi
}

update_pip_data() {
    if hash pip ; then
        check_pip3_installation

        echo "Updating pip data..."

        pip_data=$data_dir/pipdata

        printf "" > "$pip_data"

        if [ "$PIP3" = "True" ]; then
            pip3 list --format freeze >> "$pip_data"
        else
            pip list --format freeze >> "$pip_data"
        fi
    else
        echo "pip not installed."
    fi
}


install_pip_data() {
    if [ -z "$NO_RECURSE" ]; then
        NO_RECURSE=0
    elif [ $NO_RECURSE -gt 1 ]; then
        # Don't recurse past once
        # indicates that pacman failed to install pip
        return
    fi

    if hash pip ; then
        check_pip3_installation

        pip_data=$data_dir/pipdata

        if [ -f "$pip_data" ]; then
            if [ "$PIP3" = "True" ]; then
                pip3 install -r "$pip_data"
            else
                pip install -r "$pip_data"
            fi
        else
            echo "$pip_data does not exist. Cannot install pip packages."
        fi
    else
        pacman -Syu --noconfirm python-pip
        install_pip_data
        NO_RECURSE=$((NO_RECURSE + 1))
    fi
}


update_pip2_data() {
    if hash pip ; then
        check_pip2_installation

        echo "Updating pip data..."

        pip_data=$data_dir/pip2data

        if [ -f "$pip_data" ]; then
            rm "$pip_data" && touch "$pip_data"
        else
            touch "$pip_data"
        fi

        if [ "$PIP2" = "True" ]; then
            pip2 list --format freeze >> "$pip_data"
        else
            pip list --format freeze >> "$pip_data"
        fi
    else
        echo "pip2 not installed."
    fi
}


install_pip2_data() {
    if hash pip ; then
        check_pip2_installation

        pip_data=$data_dir/pip2data

        if [ -f "$pip_data" ]; then
            if [ "$PIP2" = "True" ]; then
                pip2 install -r "$pip_data"
            else
                pip install -r "$pip_data"
            fi
        else
            echo "$pip_data does not exist. Cannot install pip packages."
        fi
#    else # I don't want to install pip2 by default. That shit whomps
#        pacman -Syu --noconfirm python2-pip
#        install_pip2_data
    fi
}

update_yay_data() {
    if hash yay ; then
        echo "Updating yay data..."
        yay_data=$data_dir/yaydata
        printf "" > "$yay_data"
        yay -Qent >> "$yay_data"
    else
        echo "yay not installed."
    fi
}

# Requires root password for installation
install_yay_data() {
    if hash yay ; then
        yay_data=$data_dir/yaydata
        if [ -f "$yay_data" ]; then
            cur_installed=$(yay -Q | cut -d ' ' -f1)
            while read -r pkg; do
                name=$($pkg | cut -d ' ' -f1)
                version=$($pkg | cut -d ' ' -f2)

                installed=False
                for cur_pkg in $cur_installed; do
                    if [ "$cur_pkg" = "$name" ]; then
                        installed=True
                    fi
                done

                if ! $installed ; then
                    # Arch is a rolling release so you really `shouldn't`
                    # specify the version
                    yay -Syu --noconfirm "$name"
                fi
            done < "$yay_data"
        else
            echo "$yay_data does not exist. Cannot install yay packages."
        fi
    else
        # I feel like this will fuck me over if I am not careful
        echo "yay not installed. Installing..."
        pacman -Syu --noconfirm yay
        install_yay_data
    fi
}

update_brew_data() {
    if [ "$(uname -s)"  = "Darwin" ]; then
        if hash brew ; then
            echo "Updating brew data..."
            brew_data=$data_dir/brewdata
            printf "" > "$brew_data"
            brew list -1 --versions >> "$brew_data"
        else
            echo "Brew not installed"
        fi
    else
        echo "Not Darwin OS -- skipping brew..."
    fi
}

install_brew_data() {
    if [ "$(uname -s)"  = "Darwin" ]; then
        if hash brew ; then
            brew_data=$data_dir/brewdata

            if [ -f "$brew_data" ]; then
                cur_installed=$(brew list -1)

                while read -r pkg; do
                    name=$($pkg | cut -d ' ' -f1)
                    version=$($pkg | cut -d ' ' -f2)

                    installed=False
                    for cur_pkg in $cur_installed; do
                        if [ "$cur_pkg" = "$name" ]; then
                            installed=True
                        fi
                    done

                    if ! $installed ; then
                        brew install "$name@$version"
                    fi
                done < "$brew_data"
            else
                echo "$brew_data does not exist. Cannot install brew formulae."
            fi
        else
            # I feel like this will fuck me over if I am not careful
            echo "Brew not installed. Installing..."
            /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            install_brew_data
        fi
        echo "Not Darwin OS -- skipping brew..."
    fi
}

select_update() {
    case $1 in
        "pip")
            update_pip_data
            ;;
        "pip2")
            update_pip2_data
            ;;
        "yay")
            update_yay_data
            ;;
        "vim")
            update_vim_data
            ;;
        "brew")
            update_brew_data
            ;;
        "github")
            update_github_data
            ;;
        "gitlab")
            update_gitlab_data
            ;;
        "srht")
            update_srht_data
            ;;
        *)
            echo "$1 is not managed by this script."
            ;;
    esac
}

select_install() {
    case $1 in
        "pip")
            install_pip_data
            ;;
        "yay")
            install_yay_data
            ;;
        "vim")
            install_vim_data
            ;;
        "pip2")
            install_pip2_data
            ;;
        "brew")
            install_brew_data
            ;;
        "github")
            install_github_data
            ;;
        "gitlab")
            install_gitlab_data
            ;;
        "srht")
            install_srht_data
            ;;
        *)
            echo "$1 is not managed by this script."
            ;;
    esac
}

update_all() {
    update_yay_data
    update_pip_data
    update_pip2_data
    update_vim_data
    update_brew_data
    update_gitlab_data
    update_github_data
    update_srht_data
}

install_all() {
    install_yay_data
    install_pip_data
    install_vim_data
    install_brew_data
    install_gitlab_data
    install_github_data
    install_srht_data
}

if [ -d "$data_dir" ]; then
    if [ $# -eq 0 ]; then
        update_all
    else
        case $1 in 
            "update")
                if [ $# -gt 1 ]; then
                    select_update "$2"
                else
                    update_all
                fi
                ;;
            "init")
                if [ $# -gt 1 ]; then
                    select_install "$2"
                else
                    install_all
                fi
                ;;
            "install")
                if [ $# -gt 1 ]; then
                    select_install "$2"
                else
                    install_all
                fi
                ;;
            *)
                echo "The only available options are 'update' and 'install' for pip, yay, and vim."
                ;;
        esac
    fi
else
    echo "$data_dir does not exist. Please create it and/or stow it."
fi
